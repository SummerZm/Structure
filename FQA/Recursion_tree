 在某个节点下插入新节点
 递归理解
 A. 链表到树的递归遍历的变化: 
	a. 链表的递归路径只有一条
	b. 树的递归路径有多条，需要相关的选路代码

 B. 链表和树的层次关系是一样的
	a. 操作的对象总是以父节点为主体, 子节点为辅。迭代进行
	
 C. 递归的组成
	a. 临界条件 - 递归的结束条件【在有限时间内一定成立】

	b. 节点操作 - 增删改查
		1. 如何确定遍历路径? - 【查】
			-- 意义: 正确的寻路算法，可以避免遍历整棵树，提高查找效率. 
			-- 实现: 在设计一棵树时，要有意识设计寻路查找的判断依据【ex: 二分查找树】
			-- 区分: 遍历搜索整树，查找要对枝干进行选径

		2. 如何在递归代码中进行增删? - 【增删】
			-- 对于引起数据结构变化的递归操作需要形成递归链
				树递归链 【增加】
				if(e.compareTo(node.e) < 0)			
					node.left = add(node.left, e);
				else if(e.compareTo(node.e) > 0)
					node.right = add(node.right, e);	【递归链】
				return node;

				链表递归链 - 【删除】
				node<int>* tmp = NULL;	// 自身是临界啥都不做
				if(node==NULL) return node; 
				node->m_next = recursiveDelete(node->m_next, val); // 往上迭代-绑定关系
				if(node->m_elemet==val) {	// 修改自身数据
					tmp = node->m_next;
					delete node;
				}
				else tmp = node;
				return  temp;

			-- 对于不引起数据结构变化操作的递归. 【查改(前中后序)】
				if(e.compareTo(node.e) == 0)	
					return true;				【返回数据-不涉及结构变化】		
				else if(e.compareTo(node.e) < 0)
					return contains(node.left, e);	
				else
					return contains(node.right, e);	

		3. 查找/遍历后如何进行正确的回溯？

 D. 树的遍历：
	a. 前序遍历：对遍历到的节点立马进行操作。
	b. 中序遍历：对数组进行顺序输出。
	c. 后序遍历：对树进行破坏性操作。(因为已经对其左右子树遍历处理过了)

 E. 递归理解 【结构破坏性操作与非破坏操作】
	a. 查询: 确定临界条件，选径函数，在递归的过程中将数据的引用抛出。 【非破坏性】
	b. 增删: 要形成递归返回链，使得在递归最深处处理完增删逻辑，能沿着链正确返回。 【破坏性】
	c. 修改：前/中/后/层序修改 【破坏性 - 一般是遍历修改 - 不需要形成递归返回链】



